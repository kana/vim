*if_gosh.txt*	For Vim version 7.2.  Last change: 2008 Sep 12


		  VIM REFERENCE MANUAL    by Kana Natsuno


The Gauche Interface to Vim				*gosh* *Gauche*

1. Commands			|gauche-commands|
2. The vim module		|gauche-vim|
3. Rules for converting values	|gauche-conversion-rule|
4. Remarks			|gauche-remarks|

{Vi does not have any of these commands}

The Gauche interface is available only when Vim was compiled with the
|+gauche| feature.

Note: Still under development -- not all of the following features are not
implemented yet.

==============================================================================
1. Commands						*gauche-commands*

							*:gauche* *:ga*
:[range]ga[uche] {stmt}
			Execute Gauche statement {stmt}.

:[range]ga[uche] << {endmarker}
{script}
{endmarker}
			Execute Gauche script {script}.
			Note: This command doesn't work when the Gauche
			feature wasn't compiled in.  To avoid errors, see
			|script-here|.

							*:gafile* *:gaf*
:[range]gaf[ile] {file}
			Execute the Gauche script in {file}.  The whole
			argument is used as a single file name.
			This command is equivalent to the following: >

				:gauche (load {file})
<

Both of these commands do essentially the same thing - they execute a piece of
Gauche code, with the "current range" set to the given line range.  See also
|gauche-range|.

In the case of :gauche, the code to execute is in the command-line.
In the case of :gafile, the code to execute is the contents of the given file.

Gauche commands cannot be used in the |sandbox|.

==============================================================================
2. The vim module					*gauche-vim*

Gauche interface provides the "vim" module for the Scheme world.  It is
automatically loaded and it exports the following content.
BUGS: Currently all content are defined in the user module, not vim module.

Function: (vim-execute {vim-script})			*(vim-execute)*
			Execute a string as {vim-script}.  Return value is
			undefined.  This is equivalent to |:execute| in Vim
			script.

Function: (vim-eval {vim-script})			*(vim-eval)*
			Evaluate a string as {vim-script}, then return the
			result.  This is equivalent to |eval()| in Vim script.

			Note that {vim-script} must be a valid one noted in
			|expression-syntax|, for example, "1 + 2".  It cannot
			be a usual Vim script such as "wincmd k".

Function: (vim-echomsg-port)				*(vim-echomsg-port)*
			Return an output port.  Whenever an object is written
			to this port, it will be showed by |:echomsg|.

			Note that if you want to show a message with this
			port, you have to give the message at once.  (format)
			and other procedures may write to this port two or
			more times, and if so, it causes multiple |:echomsg|.

Function: (vim-echoerr-port)				*(vim-echoerr-port)*
			Like |(vim-echomsg-port)|, but written object will be
			showed by |:echoerr|.

==============================================================================
3. Rules for converting values			     *gauche-conversion-rules*

Vim script	Gauhce		Remarks ~
----------	------		-------
Number		<integer>	error on overflow
Float		<real>		may lose the original value
				{only when compiled with the |+float| feature}
String		<string>	immutable / may be incomplete string
List		<vector>	immutable
Dictionary	<hash-table>	immutable / type is string=?
Funcref		<vim-funcref>	applicable

==============================================================================
4. Remarks						*gauche-remarks*

Don't use (standard-input-port), (standard-output-port) and
(standard-error-port).  If they are used, Vim may be crashed.

The initial values of (current-input-port), (current-output-port) and
(current-error-port) are "null" ports, i.e., nothing can be read from it and
writing to it does nothing.

There should be many API to easily control/interact Vim from the Gauche world.

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
